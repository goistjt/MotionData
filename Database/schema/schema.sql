-- MySQL Script generated by MySQL Workbench
-- 04/23/17 23:22:43
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema six-dof
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `six-dof` ;

-- -----------------------------------------------------
-- Schema six-dof
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `six-dof` DEFAULT CHARACTER SET utf8 ;
USE `six-dof` ;

-- -----------------------------------------------------
-- Table `six-dof`.`DeviceNames`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `six-dof`.`DeviceNames` ;

CREATE TABLE IF NOT EXISTS `six-dof`.`DeviceNames` (
  `device_name` VARCHAR(255) NULL DEFAULT NULL,
  `device_id` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`device_id`),
  INDEX `device_id_dx` (`device_id` ASC),
  INDEX `device_to_name` (`device_id` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `six-dof`.`Session`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `six-dof`.`Session` ;

CREATE TABLE IF NOT EXISTS `six-dof`.`Session` (
  `id` INT(32) NOT NULL AUTO_INCREMENT,
  `description` VARCHAR(255) NULL DEFAULT NULL,
  `starting_time` DOUBLE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`id` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 82
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `six-dof`.`Records`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `six-dof`.`Records` ;

CREATE TABLE IF NOT EXISTS `six-dof`.`Records` (
  `id` VARCHAR(255) NOT NULL,
  `session_id` INT(32) NOT NULL,
  `device_id` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `session_id_idx` (`session_id` ASC),
  INDEX `idx_Records_device_id` (`device_id` ASC),
  CONSTRAINT `device_id`
    FOREIGN KEY (`device_id`)
    REFERENCES `six-dof`.`DeviceNames` (`device_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `session_id`
    FOREIGN KEY (`session_id`)
    REFERENCES `six-dof`.`Session` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `six-dof`.`AccelPoints`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `six-dof`.`AccelPoints` ;

CREATE TABLE IF NOT EXISTS `six-dof`.`AccelPoints` (
  `record_id` VARCHAR(255) NOT NULL,
  `timestamp` DOUBLE NOT NULL,
  `surge` DOUBLE NULL DEFAULT NULL,
  `sway` DOUBLE NULL DEFAULT NULL,
  `heave` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`record_id`, `timestamp`),
  CONSTRAINT `record_id`
    FOREIGN KEY (`record_id`)
    REFERENCES `six-dof`.`Records` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `six-dof`.`GyroPoints`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `six-dof`.`GyroPoints` ;

CREATE TABLE IF NOT EXISTS `six-dof`.`GyroPoints` (
  `record_id` VARCHAR(255) NOT NULL,
  `timestamp` DOUBLE NOT NULL,
  `roll` DOUBLE NULL DEFAULT NULL,
  `pitch` DOUBLE NULL DEFAULT NULL,
  `yaw` DOUBLE NULL DEFAULT NULL,
  PRIMARY KEY (`record_id`, `timestamp`),
  CONSTRAINT `fk_record_id`
    FOREIGN KEY (`record_id`)
    REFERENCES `six-dof`.`Records` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

USE `six-dof` ;

-- -----------------------------------------------------
-- procedure add_session
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`add_session`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `add_session`(
input_d varchar(255),
input_st double
)
BEGIN
START TRANSACTION;
INSERT INTO Session (description, starting_time) VALUES( input_d, input_st );
COMMIT;
SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_device_entry
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`create_device_entry`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `create_device_entry`(
	device_id_in varchar(255),
    device_name_in varchar(255)
)
BEGIN
START TRANSACTION;
INSERT INTO DeviceNames (device_name, device_id) VALUES(device_name_in, device_id_in);
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_record
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`create_record`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `create_record`(
	id_in varchar(255),
    session_id int,
    device_id varchar(255)
)
BEGIN
START TRANSACTION;
INSERT INTO Records (id, session_id, device_id) VALUES(id_in, session_id, device_id);
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_device_entry
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`delete_device_entry`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_device_entry`(
	device_id_in varchar(255)
)
BEGIN
START TRANSACTION;
DELETE FROM DeviceNames where device_id = device_id_in;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_session
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`delete_session`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_session`(
	session_id INT
)
BEGIN
	START TRANSACTION;
    DELETE FROM `Session` WHERE id = session_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_all_records_from_session
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`get_all_records_from_session`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_all_records_from_session`(
s_id int(32)
)
BEGIN
SELECT Records.id, Records.session_id, Records.device_id FROM Records where session_id = s_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_device_name
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`get_device_name`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_device_name`(
	device_id_in varchar(255)
)
BEGIN
START TRANSACTION;
SELECT device_name FROM DeviceNames WHERE device_id = device_id_in LIMIT 1;
COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_session_id
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`get_session_id`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_session_id`(
description_in varchar(255),
starting_time_in double
)
BEGIN
SELECT * FROM Session WHERE description = description_in AND starting_time = starting_time_in;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_sessions_not_related_to_device
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`get_sessions_not_related_to_device`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_sessions_not_related_to_device`(
device varchar(255)
)
BEGIN
SELECT * FROM Session WHERE id in (SELECT session_id FROM Records WHERE device_id != device);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure reset_session_auto_index
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`reset_session_auto_index`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `reset_session_auto_index`()
BEGIN
	DECLARE final_index INT;
	DECLARE count INT;
    SELECT count(`id`) INTO @count FROM `Session`;
	IF count <> 0 THEN
		SET final_index = (SELECT MAX( `id` ) FROM `Session`)+1;
	ELSE
		SET final_index = 1;
	END IF;
    SET @SQL := CONCAT('ALTER TABLE Session AUTO_INCREMENT =  ', final_index);
	PREPARE _stmt FROM @SQL;
    START TRANSACTION;
    EXECUTE _stmt;
	COMMIT;
    DEALLOCATE PREPARE _stmt;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure select_accel
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`select_accel`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_accel`(
	record_id_in varchar(255)
)
BEGIN
	SELECT AccelPoints.timestamp, AccelPoints.surge, AccelPoints.sway, AccelPoints.heave
    FROM AccelPoints WHERE AccelPoints.record_id = record_id_in ORDER BY AccelPoints.timestamp ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure select_all_accel_from_session
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`select_all_accel_from_session`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_all_accel_from_session`(
	sid int(30)
)
BEGIN
select `timestamp`, surge, sway, heave from 
(select r.id as session_record_id from Records as r where r.session_id = sid) as current_session
left join
AccelPoints
on session_record_id = AccelPoints.record_id
order by `timestamp`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure select_all_gyro_from_session
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`select_all_gyro_from_session`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_all_gyro_from_session`(
	sid int(30)
)
BEGIN
select `timestamp`, roll, pitch, yaw from 
(select r.id as session_record_id from Records as r where r.session_id = sid) as current_session
left join
GyroPoints
on session_record_id = GyroPoints.record_id
order by `timestamp`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure select_gyro
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`select_gyro`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_gyro`(
record_id_in varchar(255)
)
BEGIN
	SELECT GyroPoints.timestamp, GyroPoints.roll, GyroPoints.pitch, GyroPoints.yaw
	FROM GyroPoints WHERE GyroPoints.record_id = record_id_in ORDER BY GyroPoints.timestamp ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure select_record
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`select_record`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `select_record`(
record varchar(255)
)
BEGIN
SELECT  AccelPoints.timestamp,  AccelPoints.surge, AccelPoints.sway, AccelPoints.heave, GyroPoints.roll,  GyroPoints.pitch, GyroPoints.yaw FROM AccelPoints 
LEFT OUTER JOIN GyroPoints 
ON AccelPoints.timestamp = GyroPoints.timestamp 
WHERE AccelPoints.record_id = record AND (GyroPoints.record_id = record or GyroPoints.record_id is null) 

UNION ALL

SELECT  GyroPoints.timestamp, AccelPoints.surge, AccelPoints.sway, AccelPoints.heave, GyroPoints.roll, GyroPoints.pitch, GyroPoints.yaw FROM AccelPoints 
RIGHT OUTER JOIN GyroPoints 
ON AccelPoints.timestamp = GyroPoints.timestamp 
WHERE GyroPoints.record_id = record AND (AccelPoints.record_id = record or AccelPoints.record_id is null) 
ORDER BY timestamp ASC;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_device_entry
-- -----------------------------------------------------

USE `six-dof`;
DROP procedure IF EXISTS `six-dof`.`update_device_entry`;

DELIMITER $$
USE `six-dof`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_device_entry`(
	device_id_in varchar(255),
    device_name_in varchar(255)
)
BEGIN
START TRANSACTION;
UPDATE DeviceNames SET device_name = device_name_in WHERE device_id = device_id_in;
COMMIT;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
